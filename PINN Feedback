use ndarray::{Array, Array2};
use ndarray_rand::RandomExt;
use rand_distr::Uniform;
use ndarray_linalg::Solve; // For solving linear equations
use std::f64::consts::PI;

/// Define the harmonic function
fn harmonic_oscillator(x: f64, frequency: f64, amplitude: f64) -> f64 {
    amplitude * (2.0 * PI * frequency * x).sin()
}

/// Define the physics loss: differential equation for harmonic oscillators
fn physics_loss(frequency: f64, amplitude: f64, x_values: &Array<f64, ndarray::Ix1>) -> f64 {
    x_values.iter().fold(0.0, |acc, &x| {
        let d2y_dx2 = -(2.0 * PI * frequency).powi(2) * harmonic_oscillator(x, frequency, amplitude);
        acc + d2y_dx2.powi(2) // Squared error as loss
    })
}

/// Define the training process
fn train(
    x_values: &Array<f64, ndarray::Ix1>,
    y_values: &Array<f64, ndarray::Ix1>,
    epochs: usize,
    learning_rate: f64,
) -> (f64, f64) {
    let mut frequency = 1.0; // Initial guess
    let mut amplitude = 1.0; // Initial guess

    for _ in 0..epochs {
        // Compute physics loss
        let loss = physics_loss(frequency, amplitude, x_values);

        // Update parameters (gradient descent)
        frequency -= learning_rate * loss;
        amplitude -= learning_rate * loss;
    }

    (frequency, amplitude)
}

/// Main function to simulate PINN
fn main() {
    // Simulated data
    let x_values: Array<f64, ndarray::Ix1> = Array::linspace(0.0, 1.0, 100);
    let y_values: Array<f64, ndarray::Ix1> = x_values.mapv(|x| harmonic_oscillator(x, 2.0, 1.0));

    // Train the model
    let (optimized_frequency, optimized_amplitude) = train(&x_values, &y_values, 1000, 0.01);

    println!(
        "Optimized Frequency: {}, Optimized Amplitude: {}",
        optimized_frequency, optimized_amplitude
    );
}
